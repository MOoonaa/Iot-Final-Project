#include <Arduino.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <WiFi.h>
#include <PubSubClient.h>
#include <ESP32Servo.h>
#include <WiFiClientSecure.h>
#include <ESP32PWM.h>
#include <DHT.h>
 

// Replace these with your WiFi and MQTT broker details
const char* ssid = "Zia1";
const char* password = "Ziazone2021";
const char* mqttServer = "9295ba44a3014ae68d67fc8c4d721df0.s1.eu.hivemq.cloud";
const int mqttPort = 8883;  // Make sure this is the correct port for your broker
const char* mqttUser = "Mahmoud"; // Leave empty if not used
const char* mqttPassword = "M123456m"; // Leave empty if not used

//Pins
const int servoPin = 5;          // Pin connected to the servo 
const int flameSensorPin = 35;   // Analog pin connected to the flame sensor 
const int irSensorPin = 15;      // Digital pin connected to the IR sensor 
const int buzzerPin = 18;        // Pin connected to the buzzer 
const int dhtPin = 4;            // Pin connected to the DHT sensor 
 
const int DHT_TYPE = DHT11;      // Define DHT type (DHT11 or DHT22) 
const int flameThreshold = 400;  // Default threshold for flame detection (adjust as needed) 

// Variables
unsigned long previousMillis = 0;
const long interval = 2000; // Interval at which to read the sensors and publish
unsigned long startTime;

// Variables for non-blocking servo movement
unsigned long servoPreviousMillis = 0;
const long servoInterval = 500; // Half a second

WiFiClientSecure espClient;
PubSubClient client(espClient);
// Create objects for the servo, DHT sensor, and LCD 
Servo myServo; 
DHT dht(dhtPin, DHT_TYPE); 
// set the LCD number of columns and rows
int lcdColumns = 16;
int lcdRows = 2;

// set LCD address, number of columns and rows
// if you don't know your display address, run an I2C scanner sketch
LiquidCrystal_I2C lcd(0x27, lcdColumns, lcdRows);

void connectToMqtt()
{
    while (!client.connected())
    {
        Serial.print("Connecting to MQTT...");

        if (client.connect("ESP32Client", mqttUser, mqttPassword))
        {
            Serial.println("Connected");
            client.subscribe("sensor/reading"); // Subscribe to the IR sensor topic
            client.subscribe("flame/detected"); // Subscribe to the flame detected topic
            client.subscribe("temp/reading");
            client.subscribe("humidity/reading");
            client.subscribe("ultrasonic/distance");
          
        }
        else
        {
            Serial.print("failed, rc=");
            Serial.print(client.state());
            Serial.println(" try again in 5 seconds");
            delay(5000);
        }
    }
}


 
void setup() { 

 // Connect to Wi-Fi
    WiFi.begin(ssid, password);
    int wifiAttempts = 0;
    const int maxWifiAttempts = 30; // Max number of attempts
    while (WiFi.status() != WL_CONNECTED && wifiAttempts < maxWifiAttempts)
    {
        delay(500);
        Serial.print(".");
        wifiAttempts++;
    }
    if (WiFi.status() != WL_CONNECTED)
    {
        Serial.println("Failed to connect to WiFi");
        while (true); // Stop execution if WiFi connection fails
    }
    Serial.println("WiFi connected");
    espClient.setInsecure(); // For security, use proper certificate validation in production

    // Set MQTT server
    client.setServer(mqttServer, mqttPort);

    // Connect to MQTT broker
    connectToMqtt();


  pinMode(flameSensorPin, INPUT); 
  pinMode(irSensorPin, INPUT); 
  pinMode(buzzerPin, OUTPUT); 
 
  myServo.attach(servoPin); 
  myServo.write(90); // Set the servo to 90 degrees 
 
  dht.begin(); // Initialize the DHT sensor 
 
  lcd.init();        // Initialize the LCD 
  lcd.backlight();   // Turn on the LCD backlight 
  lcd.clear();       // Clear any previous text 
 
  Serial.begin(9600); // Start serial communication 
  Serial2.begin(9600, SERIAL_8N1, 17, 16); // Initialize Serial2 (TX=17, RX=16 on ESP32)
  // Calibration step 
  Serial.println("Calibrating flame sensor..."); 
  delay(500); // Allow time for sensor to stabilize 
  for (int i = 0; i < 10; i++) { 
    int sensorValue = analogRead(flameSensorPin); 
    Serial.print("Flame Sensor Value: "); 
    Serial.println(sensorValue); 
    delay(500); // Delay to get stable readings 
  } 
  Serial.println("Calibration done."); 
} 
 
void loop() {

    if (!client.connected())
    {
        connectToMqtt();
    }
    client.loop();

    myServo.write(0);    // Move to 0 degrees 
    delay(500);          // Wait for half a second 
    myServo.write(90);   // Move to 90 degrees 
    delay(500);          // Wait for half a second 

    unsigned long currentMillis = millis();

    if (currentMillis - previousMillis >= interval)
    {
        // Update the previousMillis to the current time
        previousMillis = currentMillis;

        // Read flame sensor value 
        int flameSensorValue = analogRead(flameSensorPin); 

        // Read IR sensor value 
        int irSensorValue = digitalRead(irSensorPin); 

        // Check flame sensor value 
        bool flameDetected = flameSensorValue < flameThreshold; // Adjust threshold as needed 

        // Check IR sensor value 
        bool motionDetected = irSensorValue == LOW; 

        // Print sensor values for debugging 
        Serial.print("Flame Sensor Value: "); 
        Serial.println(flameSensorValue); 
        Serial.print("IR Sensor Value: "); 
        Serial.println(irSensorValue); 

        // Receive distance data from Arduino
        if (Serial2.available()) {
            String receivedData = Serial2.readStringUntil('\n');
            Serial.println("Received from Arduino: " + receivedData);

            // Publish distance data to MQTT
            client.publish("ultrasonic/distance", receivedData.c_str());

            // Update LCD with received distance
            lcd.clear();           // Clear the previous display
            lcd.setCursor(0, 0);   // Set cursor to first row
            lcd.print("Distance: "); 
            lcd.print(receivedData);
        }

        // Update the LCD and buzzer based on sensor readings
        if (flameDetected && motionDetected) { 
            digitalWrite(buzzerPin, LOW); // Turn off buzzer 
            lcd.clear();                  // Clear the previous display 
            lcd.setCursor(0, 0);          // Set cursor to the first row 
            lcd.print("Working");         // Display "Working" on the LCD 
            Serial.println("Flame and motion detected! Buzzer OFF"); 
        } else if (flameDetected) { 
            digitalWrite(buzzerPin, HIGH); // Turn on buzzer 
            lcd.clear();                   // Clear the previous display 
            lcd.setCursor(0, 0);           // Set cursor to the first row 
            lcd.print("FIRE DETECTED!");   // Display "FIRE DETECTED!" on the LCD 
            Serial.println("Flame detected! Buzzer ON"); 
        } else if (motionDetected) {
            digitalWrite(buzzerPin, HIGH); // Turn on buzzer 
            lcd.clear();                   // Clear the previous display 
            lcd.setCursor(0, 0);           // Set cursor to the first row 
            lcd.print("MOTION DETECTED!"); // Display "MOTION DETECTED!" on the LCD 
            Serial.println("Motion detected! Buzzer ON"); 
        } else {
            digitalWrite(buzzerPin, LOW);  // Turn off buzzer 
            lcd.clear();                   // Clear the previous display 
            lcd.setCursor(0, 0);           // Set cursor to the first row 
            lcd.print("No Alert");         // Display "No Alert" on the LCD 
            Serial.println("No alert detected! Buzzer OFF");
        }

        // Publish flame detection status (1 if detected, 0 if not)
        String flameData = flameDetected ? "1" : "0";
        client.publish("flame/detected", flameData.c_str());

        // Publish motion detection status (1 if detected, 0 if not)
        String irData = motionDetected ? "1" : "0";
        client.publish("sensor/reading", irData.c_str());

        // Read temperature and humidity from the DHT sensor 
        float temperature = dht.readTemperature(); // Temperature in Celsius 
        float humidity = dht.readHumidity();       // Humidity in percentage 

        // Check if any reads failed and exit early (to try again). 
        if (isnan(temperature) || isnan(humidity)) {
            Serial.println("Failed to read from DHT sensor!"); 
            return; 
        }

        // Print temperature and humidity to the Serial Monitor 
        Serial.print("Temperature: "); 
        Serial.print(temperature); 
        Serial.println(" Â°C"); 

        Serial.print("Humidity: "); 
        Serial.print(humidity); 
        Serial.println(" %"); 

        // Publish the humidity to the MQTT topic "humidity/reading"
        char humidityData[8];
        dtostrf(humidity, 1, 2, humidityData); // Convert humidity to string
        client.publish("humidity/reading", humidityData);

        // Publish the temperature to the MQTT topic "temp/reading"
        char temperatureData[8];
        dtostrf(temperature, 1, 2, temperatureData); // Convert temperature to string
        client.publish("temp/reading", temperatureData);

    }
}

